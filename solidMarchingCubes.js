solidMarchingCubes = function(size_x,size_y,size_z, values, points, isolevel)
{
	var geo = new THREE.Geometry();

	if (values == null || points == null)
	{
		return;
	}

	//TODO formerly 12 was frikkin 3
	//threejsMC seemed confident they wouldn't be overflowed. They were.
	//maybe it was clever about how it divided stuff up?
	solidMcScope.positionArray = new Float32Array( size_x * size_y * size_z * 12 );
	solidMcScope.normalArray   = new Float32Array( size_x * size_y * size_z * 12 );
	solidMcScope.normalCache   = new Float32Array( size_x * size_y * size_z * 12 );
	solidMcScope.count = 0;
	solidMcScope.values = values;

	var cubeVerts = [[0,0,0], [1,0,0], [1,1,0], [0,1,0],
					 [0,0,1], [1,0,1], [1,1,1], [0,1,1]];	
	solidMcScope.cubeOffsets = [];
	for (var i = 0; i < 8; ++i)
	{
		var v = cubeVerts[i]
		solidMcScope.cubeOffsets.push(v[0] + size_z * (v[1] + size_y * v[2]));
	}

	// var sample = 3;
	// for (var x = 3; x < sample+1; x++) {
	// for (var y = 0; y < 1; y++) {
	// for (var z = 0; z < 1; z++) {
	for (var x = 1; x < size_x - 2; x++) {
	for (var y = 1; y < size_y - 2; y++) {
	for (var z = 1; z < size_z - 2; z++) {
		var offset0 = z + size_z * (y + size_y * x);

		polygonize( 
			offset0 + solidMcScope.cubeOffsets[0], offset0 + solidMcScope.cubeOffsets[4],
			offset0 + solidMcScope.cubeOffsets[7], offset0 + solidMcScope.cubeOffsets[3],
			offset0 + solidMcScope.cubeOffsets[1], offset0 + solidMcScope.cubeOffsets[5],
			offset0 + solidMcScope.cubeOffsets[6], offset0 + solidMcScope.cubeOffsets[2],
			points, isolevel );
	}
	}
	}

	for ( var i = solidMcScope.count * 3, il = solidMcScope.positionArray.length; i < il; i ++ )
	{
		solidMcScope.positionArray[ i ] = 0.0;
	}

	//----------Turning it into a threejs thing
	geo.vertices = Array(solidMcScope.count);
	var normals = [];
	for ( var i = 0; i < solidMcScope.count; i ++ )
	{
		geo.vertices[i] = new THREE.Vector3().fromArray( solidMcScope.positionArray, i * 3 );
		normals[i] = new THREE.Vector3().fromArray( solidMcScope.normalArray, i * 3 );
	}
	var nfaces = solidMcScope.count / 3;
	for ( var i = 0; i < nfaces; i ++ )
	{
		var a = i * 3;
		var b = a + 1;
		var c = a + 2;

		var na = normals[ a ];
		var nb = normals[ b ];
		var nc = normals[ c ];

		var face = new THREE.Face3( a, b, c, [ na, nb, nc ] );
		geo.faces.push( face );
	}

	solidMcScope.values = null;
	solidMcScope.points = null;
	solidMcScope.positionArray = null;
	solidMcScope.normalArray = null;
	solidMcScope.normalCache = null;

	return geo;
}

function polygonize( 
	q,q1,q1y,qy,qz,q1z,q1yz,qyz,
	points,isolevel )
{
	var fx = points[q][0],
		fy = points[q][1],
		fz = points[q][2],
		fx2 = points[q1][0],
		fy2 = points[qy][1],
		fz2 = points[qz][2];

	// if(q === 0) console.log(fx) 

	var cubeindex = 0,
		field0 = solidMcScope.values[ q ],
		field1 = solidMcScope.values[ q1 ],
		field2 = solidMcScope.values[ qy ],
		field3 = solidMcScope.values[ q1y ],
		field4 = solidMcScope.values[ qz ],
		field5 = solidMcScope.values[ q1z ],
		field6 = solidMcScope.values[ qyz ],
		field7 = solidMcScope.values[ q1yz ];

	if ( field0 < isolevel ) cubeindex |= 1;
	if ( field1 < isolevel ) cubeindex |= 2;
	if ( field2 < isolevel ) cubeindex |= 8;
	if ( field3 < isolevel ) cubeindex |= 4;
	if ( field4 < isolevel ) cubeindex |= 16;
	if ( field5 < isolevel ) cubeindex |= 32;
	if ( field6 < isolevel ) cubeindex |= 128;
	if ( field7 < isolevel ) cubeindex |= 64;

	var bits = solidMcScope.edgeTable[ cubeindex ];

	if ( bits === 0 ) return 0; // cube is entirely in/out of the surface - bail, nothing to draw

	//now doing one edge at a time

	// top of the cube

	if ( bits & 1 )
	{
		compNorm( q );
		compNorm( q1 );
		insertVertexInterpolatedOverX( q * 3, 0, isolevel, fx, fy, fz, fx2, field0, field1 );

	}

	if ( bits & 2 )
	{
		compNorm( q1 );
		compNorm( q1y );
		insertVertexInterpolatedOverY( q1 * 3,q1y*3, 3, isolevel, fx2, fy, fz, fy2, field1, field3 );

	}

	if ( bits & 4 )
	{
		compNorm( qy );
		compNorm( q1y );
		insertVertexInterpolatedOverX( qy * 3, 6, isolevel, fx, fy2, fz, fx2, field2, field3 );

	}

	if ( bits & 8 )
	{
		compNorm( q );
		compNorm( qy );
		insertVertexInterpolatedOverY( q * 3,qy*3, 9, isolevel, fx, fy, fz, fy2, field0, field2 );

	}

	// bottom of the cube

	if ( bits & 16 )
	{
		compNorm( qz );
		compNorm( q1z );
		insertVertexInterpolatedOverX( qz * 3, 12, isolevel, fx, fy, fz2, fx2, field4, field5 );

	}

	if ( bits & 32 )
	{
		compNorm( q1z );
		compNorm( q1yz );
		insertVertexInterpolatedOverY( q1z * 3,q1yz*3, 15, isolevel, fx2, fy, fz2, fy2, field5, field7 );

	}

	if ( bits & 64 )
	{
		compNorm( qyz );
		compNorm( q1yz );
		insertVertexInterpolatedOverX( qyz * 3, 18, isolevel, fx, fy2, fz2, fx2, field6, field7 );

	}

	if ( bits & 128 )
	{
		compNorm( qz );
		compNorm( qyz );
		insertVertexInterpolatedOverY( qz * 3,qyz*3, 21, isolevel, fx, fy, fz2, fy2, field4, field6 );

	}

	// vertical lines of the cube

	if ( bits & 256 )
	{
		compNorm( q );
		compNorm( qz );
		insertVertexInterpolatedOverZ( q * 3, qz*3,24, isolevel, fx, fy, fz, fz2, field0, field4 );

	}

	if ( bits & 512 )
	{
		compNorm( q1 );
		compNorm( q1z );
		insertVertexInterpolatedOverZ( q1 * 3, q1z*3,27, isolevel, fx2, fy,  fz, fz2, field1, field5 );

	}

	if ( bits & 1024 )
	{
		compNorm( q1y );
		compNorm( q1yz );
		insertVertexInterpolatedOverZ( q1y * 3, q1yz*3,30, isolevel, fx2, fy2, fz, fz2, field3, field7 );

	}

	if ( bits & 2048 )
	{
		compNorm( qy );
		compNorm( qyz );
		insertVertexInterpolatedOverZ( qy * 3, qyz*3,33, isolevel, fx,  fy2, fz, fz2, field2, field6 );

	}

	// now create stuff

	cubeindex <<= 4;  // re-purpose cubeindex into an offset in triTable

	var o1, o2, o3, numtris = 0, i = 0;

	while ( solidMcScope.triTable[ cubeindex + i ] != - 1 )
	{
		o1 = 3 * solidMcScope.triTable[ cubeindex + i ];
		o2 = 3 * solidMcScope.triTable[ cubeindex + i + 1 ];
		o3 = 3 * solidMcScope.triTable[ cubeindex + i + 2 ];

		var c = solidMcScope.count * 3;

		solidMcScope.positionArray[ c + 0 ] = solidMcScope.vlist[ o1 ];
		solidMcScope.positionArray[ c + 1 ] = solidMcScope.vlist[ o1 + 1 ];
		solidMcScope.positionArray[ c + 2 ] = solidMcScope.vlist[ o1 + 2 ];

		solidMcScope.positionArray[ c + 3 ] = solidMcScope.vlist[ o2 ];
		solidMcScope.positionArray[ c + 4 ] = solidMcScope.vlist[ o2 + 1 ];
		solidMcScope.positionArray[ c + 5 ] = solidMcScope.vlist[ o2 + 2 ];

		solidMcScope.positionArray[ c + 6 ] = solidMcScope.vlist[ o3 ];
		solidMcScope.positionArray[ c + 7 ] = solidMcScope.vlist[ o3 + 1 ];
		solidMcScope.positionArray[ c + 8 ] = solidMcScope.vlist[ o3 + 2 ];

		solidMcScope.normalArray[ c + 0 ] = solidMcScope.nlist[ o1 ];
		solidMcScope.normalArray[ c + 1 ] = solidMcScope.nlist[ o1 + 1 ];
		solidMcScope.normalArray[ c + 2 ] = solidMcScope.nlist[ o1 + 2 ];

		solidMcScope.normalArray[ c + 3 ] = solidMcScope.nlist[ o2 ];
		solidMcScope.normalArray[ c + 4 ] = solidMcScope.nlist[ o2 + 1 ];
		solidMcScope.normalArray[ c + 5 ] = solidMcScope.nlist[ o2 + 2 ];

		solidMcScope.normalArray[ c + 6 ] = solidMcScope.nlist[ o3 ];
		solidMcScope.normalArray[ c + 7 ] = solidMcScope.nlist[ o3 + 1 ];
		solidMcScope.normalArray[ c + 8 ] = solidMcScope.nlist[ o3 + 2 ];

		solidMcScope.count += 3;

		i += 3;
		numtris ++;
	}

	return numtris;
}

function insertVertexInterpolatedOverX( q, offset, isol, x, y, z, x2, valp1, valp2 )
{
	var mu = ( isol - valp1 ) / ( valp2 - valp1 ),
		nc = solidMcScope.normalCache;

	solidMcScope.vlist[ offset + 0 ] = lerp( x, x2, mu );
	solidMcScope.vlist[ offset + 1 ] = y;
	solidMcScope.vlist[ offset + 2 ] = z;

	solidMcScope.nlist[ offset + 0 ] = lerp( nc[ q + 0 ], nc[ q + 3 ], mu );
	solidMcScope.nlist[ offset + 1 ] = lerp( nc[ q + 1 ], nc[ q + 4 ], mu );
	solidMcScope.nlist[ offset + 2 ] = lerp( nc[ q + 2 ], nc[ q + 5 ], mu );
}

function insertVertexInterpolatedOverY( q, q2, offset, isol, x, y, z, y2, valp1, valp2 )
{
	var mu = ( isol - valp1 ) / ( valp2 - valp1 ),
		nc = solidMcScope.normalCache;

	solidMcScope.vlist[ offset + 0 ] = x;
	solidMcScope.vlist[ offset + 1 ] = lerp( y, y2, mu );
	solidMcScope.vlist[ offset + 2 ] = z;

	solidMcScope.nlist[ offset + 0 ] = lerp( nc[ q + 0 ], nc[ q2 + 0 ], mu );
	solidMcScope.nlist[ offset + 1 ] = lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );
	solidMcScope.nlist[ offset + 2 ] = lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );

}

function insertVertexInterpolatedOverZ( q, q2, offset, isol, x, y, z, z2, valp1, valp2 )
{
	var mu = ( isol - valp1 ) / ( valp2 - valp1 ),
		nc = solidMcScope.normalCache;

	solidMcScope.vlist[ offset + 0 ] = x;
	solidMcScope.vlist[ offset + 1 ] = y;
	solidMcScope.vlist[ offset + 2 ] = lerp( z, z2, mu );

	solidMcScope.nlist[ offset + 0 ] = lerp( nc[ q + 0 ], nc[ q2 + 0 ], mu );
	solidMcScope.nlist[ offset + 1 ] = lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );
	solidMcScope.nlist[ offset + 2 ] = lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );

}

function compNorm( q )
{
	var q3 = q * 3;

	if ( solidMcScope.normalCache[ q3 ] === 0.0 )
	{
		var q3 = q*3;
		solidMcScope.normalCache[ q3 + 0 ] = solidMcScope.values[ q - solidMcScope.cubeOffsets[1] ] - solidMcScope.values[ q + solidMcScope.cubeOffsets[1] ];
		solidMcScope.normalCache[ q3 + 1 ] = solidMcScope.values[ q - solidMcScope.cubeOffsets[3] ] - solidMcScope.values[ q + solidMcScope.cubeOffsets[3] ];
		solidMcScope.normalCache[ q3 + 2 ] = solidMcScope.values[ q - solidMcScope.cubeOffsets[4] ] - solidMcScope.values[ q + solidMcScope.cubeOffsets[4] ];
	}
}

function lerp( a, b, t )
{
	return a + ( b - a ) * t;
}

var solidMcScope = 
{
	values: null,
	normalCache: null,
	count: 0,
	positionArray: null,
	normalArray: null,
	vlist: new Float32Array( 12 * 3 ),
	nlist: new Float32Array( 12 * 3 ),
	cubeOffsets: null
}

solidMcScope.edgeTable = new Int32Array( [
0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 ] );

solidMcScope.triTable = new Int32Array( [
- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 8, 3, 9, 8, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 2, 10, 0, 2, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 8, 3, 2, 10, 8, 10, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 11, 2, 8, 11, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 9, 0, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 11, 2, 1, 9, 11, 9, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 10, 1, 11, 10, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 10, 1, 0, 8, 10, 8, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 9, 0, 3, 11, 9, 11, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 3, 0, 7, 3, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 1, 9, 4, 7, 1, 7, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 4, 7, 3, 0, 4, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 2, 10, 9, 0, 2, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,
8, 4, 7, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 4, 7, 11, 2, 4, 2, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 0, 1, 8, 4, 7, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, - 1, - 1, - 1, - 1,
3, 10, 1, 3, 11, 10, 7, 8, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, - 1, - 1, - 1, - 1,
4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,
4, 7, 11, 4, 11, 9, 9, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 4, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 5, 4, 1, 5, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 5, 4, 8, 3, 5, 3, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 8, 1, 2, 10, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 2, 10, 5, 4, 2, 4, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, - 1, - 1, - 1, - 1,
9, 5, 4, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 11, 2, 0, 8, 11, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 5, 4, 0, 1, 5, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, - 1, - 1, - 1, - 1,
10, 3, 11, 10, 1, 3, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, - 1, - 1, - 1, - 1,
5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,
5, 4, 8, 5, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 7, 8, 5, 7, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 3, 0, 9, 5, 3, 5, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 7, 8, 0, 1, 7, 1, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 7, 8, 9, 5, 7, 10, 1, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, - 1, - 1, - 1, - 1,
8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, - 1, - 1, - 1, - 1,
2, 10, 5, 2, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 9, 5, 7, 8, 9, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,
2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, - 1, - 1, - 1, - 1,
11, 2, 1, 11, 1, 7, 7, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, - 1, - 1, - 1, - 1,
5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, - 1,
11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, - 1,
11, 10, 5, 7, 11, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 0, 1, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 8, 3, 1, 9, 8, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 6, 5, 2, 6, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 6, 5, 1, 2, 6, 3, 0, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 6, 5, 9, 0, 6, 0, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, - 1, - 1, - 1, - 1,
2, 3, 11, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 0, 8, 11, 2, 0, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, - 1, - 1, - 1, - 1,
6, 3, 11, 6, 5, 3, 5, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,
3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, - 1, - 1, - 1, - 1,
6, 5, 9, 6, 9, 11, 11, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 10, 6, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 3, 0, 4, 7, 3, 6, 5, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 9, 0, 5, 10, 6, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,
6, 1, 2, 6, 5, 1, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, - 1, - 1, - 1, - 1,
8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, - 1, - 1, - 1, - 1,
7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, - 1,
3, 11, 2, 7, 8, 4, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,
0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1,
9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, - 1,
8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,
5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, - 1,
0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, - 1,
6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, - 1, - 1, - 1, - 1,
10, 4, 9, 6, 4, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 10, 6, 4, 9, 10, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 0, 1, 10, 6, 0, 6, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,
1, 4, 9, 1, 2, 4, 2, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, - 1, - 1, - 1, - 1,
0, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 3, 2, 8, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 4, 9, 10, 6, 4, 11, 2, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, - 1, - 1, - 1, - 1,
3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,
6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, - 1,
9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, - 1, - 1, - 1, - 1,
8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, - 1,
3, 11, 6, 3, 6, 0, 0, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 4, 8, 11, 6, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 10, 6, 7, 8, 10, 8, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, - 1, - 1, - 1, - 1,
10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, - 1, - 1, - 1, - 1,
10, 6, 7, 10, 7, 1, 1, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,
2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, - 1,
7, 8, 0, 7, 0, 6, 6, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 3, 2, 6, 7, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,
2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, - 1,
1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, - 1,
11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, - 1, - 1, - 1, - 1,
8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, - 1,
0, 9, 1, 11, 6, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, - 1, - 1, - 1, - 1,
7, 11, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 8, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 1, 9, 8, 3, 1, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 1, 2, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 3, 0, 8, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 9, 0, 2, 10, 9, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, - 1, - 1, - 1, - 1,
7, 2, 3, 6, 2, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 0, 8, 7, 6, 0, 6, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 7, 6, 2, 3, 7, 0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, - 1, - 1, - 1, - 1,
10, 7, 6, 10, 1, 7, 1, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, - 1, - 1, - 1, - 1,
0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, - 1, - 1, - 1, - 1,
7, 6, 10, 7, 10, 8, 8, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 8, 4, 11, 8, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 6, 11, 3, 0, 6, 0, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 6, 11, 8, 4, 6, 9, 0, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, - 1, - 1, - 1, - 1,
6, 8, 4, 6, 11, 8, 2, 10, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, - 1, - 1, - 1, - 1,
4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, - 1, - 1, - 1, - 1,
10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, - 1,
8, 2, 3, 8, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, - 1, - 1, - 1, - 1,
1, 9, 4, 1, 4, 2, 2, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, - 1, - 1, - 1, - 1,
10, 1, 0, 10, 0, 6, 6, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, - 1,
10, 9, 4, 6, 10, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 5, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 4, 9, 5, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 0, 1, 5, 4, 0, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, - 1, - 1, - 1, - 1,
9, 5, 4, 10, 1, 2, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, - 1, - 1, - 1, - 1,
7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, - 1, - 1, - 1, - 1,
3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, - 1,
7, 2, 3, 7, 6, 2, 5, 4, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, - 1, - 1, - 1, - 1,
3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, - 1, - 1, - 1, - 1,
6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, - 1,
9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, - 1, - 1, - 1, - 1,
1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, - 1,
4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, - 1,
7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, - 1, - 1, - 1, - 1,
6, 9, 5, 6, 11, 9, 11, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, - 1, - 1, - 1, - 1,
0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, - 1, - 1, - 1, - 1,
6, 11, 3, 6, 3, 5, 5, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, - 1, - 1, - 1, - 1,
0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, - 1,
11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, - 1,
6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, - 1, - 1, - 1, - 1,
5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, - 1, - 1, - 1, - 1,
9, 5, 6, 9, 6, 0, 0, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, - 1,
1, 5, 6, 2, 1, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, - 1,
10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, - 1, - 1, - 1, - 1,
0, 3, 8, 5, 6, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 5, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 5, 10, 7, 5, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 5, 10, 11, 7, 5, 8, 3, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 11, 7, 5, 10, 11, 1, 9, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, - 1, - 1, - 1, - 1,
11, 1, 2, 11, 7, 1, 7, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, - 1, - 1, - 1, - 1,
9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, - 1, - 1, - 1, - 1,
7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, - 1,
2, 5, 10, 2, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, - 1, - 1, - 1, - 1,
9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, - 1, - 1, - 1, - 1,
9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, - 1,
1, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 7, 0, 7, 1, 1, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 0, 3, 9, 3, 5, 5, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 8, 7, 5, 9, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 8, 4, 5, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, - 1, - 1, - 1, - 1,
0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, - 1, - 1, - 1, - 1,
10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, - 1,
2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, - 1, - 1, - 1, - 1,
0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, - 1,
0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, - 1,
9, 4, 5, 2, 11, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, - 1, - 1, - 1, - 1,
5, 10, 2, 5, 2, 4, 4, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, - 1,
5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, - 1, - 1, - 1, - 1,
8, 4, 5, 8, 5, 3, 3, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 4, 5, 1, 0, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, - 1, - 1, - 1, - 1,
9, 4, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 11, 7, 4, 9, 11, 9, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, - 1, - 1, - 1, - 1,
1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, - 1, - 1, - 1, - 1,
3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, - 1,
4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, - 1, - 1, - 1, - 1,
9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, - 1,
11, 7, 4, 11, 4, 2, 2, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, - 1, - 1, - 1, - 1,
2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, - 1, - 1, - 1, - 1,
9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, - 1,
3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, - 1,
1, 10, 2, 8, 7, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 1, 4, 1, 7, 7, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, - 1, - 1, - 1, - 1,
4, 0, 3, 7, 4, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 8, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 9, 3, 9, 11, 11, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 10, 0, 10, 8, 8, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 1, 10, 11, 3, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 11, 1, 11, 9, 9, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, - 1, - 1, - 1, - 1,
0, 2, 11, 8, 0, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 2, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 3, 8, 2, 8, 10, 10, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 10, 2, 0, 9, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, - 1, - 1, - 1, - 1,
1, 10, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 3, 8, 9, 1, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 9, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 3, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1 ] );

//---------------------boring way of doing it
function marchingCubes(size_x,size_y,size_z, values, points, isolevel, method)
{
	if (values == null || points == null)
	{
		return;
	}

	var cubeVerts = [[0,0,0], [1,0,0], [1,1,0], [0,1,0],
					 [0,0,1], [1,0,1], [1,1,1], [0,1,1]];
	
	var cubeOffsets = [];
	for (var i = 0; i < 8; ++i)
	{
		var v = cubeVerts[i]
		cubeOffsets.push(v[0] + size_z * (v[1] + size_y * v[2]));
	}

	var seg_table = (method === 'squarish' ? segTable2 : segTable);
	var vertexIndicesForThisCube = new Array(12);
	var p0 = [0, 0, 0];
	var cornerPositions = [p0, p0, p0, p0, p0, p0, p0, p0];
	var cornerValues = new Float32Array(8);

	var vertices = [];
	var segments = [];
	var faces = [];
	var vertex_count = 0;
	for (var x = 0; x < size_x - 1; x++) {
	for (var y = 0; y < size_y - 1; y++) {
	for (var z = 0; z < size_z - 1; z++) {

		var offset0 = z + size_z * (y + size_y * x);

		var i = (void 0);
		var j = (void 0);
		var cubeindex = 0;
		for (i = 0; i < 8; ++i)
		{
			j = offset0 + cubeOffsets[i];
			cornerPositions[i] = points[j];
			cornerValues[i] = values[j];
			cubeindex |= (cornerValues[i] < isolevel) ? 1 << i : 0;
		}
		if (cubeindex === 0 || cubeindex === 255) { continue; }


		// 12 bit number, indicates which edges are crossed by the isosurface
		var edge_mask = edgeTable[cubeindex];

		// check which edges are crossed, and estimate the point location
		// using a weighted average of scalar values at edge endpoints.
		for (i = 0; i < 12; ++i) 
		{
			if ((edge_mask & (1 << i)) !== 0)
			{
				var e = edgeIndex[i];
				var mu = (isolevel - cornerValues[e[0]]) /
							(cornerValues[e[1]] - cornerValues[e[0]]);
				var p1 = cornerPositions[e[0]];
				var p2 = cornerPositions[e[1]];

				vertices.push(	p1[0] + (p2[0] - p1[0]) * mu,
								p1[1] + (p2[1] - p1[1]) * mu,
								p1[2] + (p2[2] - p1[2]) * mu);
				vertexIndicesForThisCube[i] = vertex_count++;
			}
		}
		var t = seg_table[cubeindex];
		for (i = 0; i < t.length; i++) {
			segments.push(vertexIndicesForThisCube[t[i]]);
		}
	}
	}
	}

	return {vertices:vertices,segments:segments};
}

var edgeTable = new Int32Array([
	0x0  , 0x0  , 0x202, 0x302, 0x406, 0x406, 0x604, 0x704,
	0x804, 0x805, 0xa06, 0xa06, 0xc0a, 0xd03, 0xe08, 0xf00,
	0x90 , 0x98 , 0x292, 0x292, 0x496, 0x49e, 0x694, 0x694,
	0x894, 0x894, 0xa96, 0xa96, 0xc9a, 0xc92, 0xe91, 0xe90,
	0x230, 0x230, 0x33 , 0x13a, 0x636, 0x636, 0x434, 0x43c,
	0xa34, 0xa35, 0x837, 0x936, 0xe3a, 0xf32, 0xc31, 0xd30,
	0x2a0, 0x2a8, 0xa3 , 0xaa , 0x6a6, 0x6af, 0x5a4, 0x4ac,
	0xaa4, 0xaa4, 0x9a6, 0x8a6, 0xfaa, 0xea3, 0xca1, 0xca0,
	0x460, 0x460, 0x662, 0x762, 0x66 , 0x66 , 0x265, 0x364,
	0xc64, 0xc65, 0xe66, 0xe66, 0x86a, 0x863, 0xa69, 0xa60,
	0x4f0, 0x4f8, 0x6f2, 0x6f2, 0xf6 , 0xfe , 0x2f5, 0x2fc,
	0xcf4, 0xcf4, 0xef6, 0xef6, 0x8fa, 0x8f3, 0xaf9, 0xaf0,
	0x650, 0x650, 0x453, 0x552, 0x256, 0x256, 0x54 , 0x154,
	0xe54, 0xf54, 0xc57, 0xd56, 0xa5a, 0xb52, 0x859, 0x950,
	0x7c0, 0x6c1, 0x5c2, 0x4c2, 0x3c6, 0x2ce, 0xc5 , 0xc4 ,
	0xfc4, 0xec5, 0xdc6, 0xcc6, 0xbca, 0xac2, 0x8c1, 0x8c0,
	0x8c0, 0x8c0, 0xac2, 0xbc2, 0xcc6, 0xcc6, 0xec4, 0xfcc,
	0xc4 , 0xc5 , 0x2c6, 0x3c6, 0x4c2, 0x5c2, 0x6c1, 0x7c0,
	0x950, 0x859, 0xb52, 0xa5a, 0xd56, 0xc57, 0xe54, 0xe5c,
	0x154, 0x54 , 0x25e, 0x256, 0x552, 0x453, 0x658, 0x650,
	0xaf0, 0xaf0, 0x8f3, 0x8fa, 0xef6, 0xef6, 0xcf4, 0xcfc,
	0x2f4, 0x3f5, 0xff , 0x1f6, 0x6f2, 0x6f3, 0x4f9, 0x5f0,
	0xa60, 0xa69, 0x863, 0x86a, 0xe66, 0xe67, 0xd65, 0xc6c,
	0x364, 0x265, 0x166, 0x66 , 0x76a, 0x663, 0x460, 0x460,
	0xca0, 0xca0, 0xea2, 0xfa2, 0x8a6, 0x8a6, 0xaa4, 0xba4,
	0x4ac, 0x5a4, 0x6ae, 0x7a6, 0xaa , 0xa3 , 0x2a8, 0x2a0,
	0xd30, 0xc31, 0xf32, 0xe3a, 0x936, 0x837, 0xb35, 0xa34,
	0x43c, 0x434, 0x73e, 0x636, 0x13a, 0x33 , 0x339, 0x230,
	0xe90, 0xe90, 0xc92, 0xc9a, 0xa96, 0xa96, 0x894, 0x89c,
	0x694, 0x695, 0x49f, 0x496, 0x292, 0x392, 0x98 , 0x90 ,
	0xf00, 0xe08, 0xd03, 0xc0a, 0xa06, 0xa0e, 0x805, 0x804,
	0x704, 0x604, 0x506, 0x406, 0x302, 0x202, 0x0  , 0x0]);

var triTable = [
      [],
      [0, 8, 3],
      [0, 1, 9],
      [1, 8, 3, 9, 8, 1],
      [1, 2, 10],
      [0, 8, 3, 1, 2, 10],
      [9, 2, 10, 0, 2, 9],
      [2, 8, 3, 2, 10, 8, 10, 9, 8],
      [3, 11, 2],
      [0, 11, 2, 8, 11, 0],
      [1, 9, 0, 2, 3, 11],
      [1, 11, 2, 1, 9, 11, 9, 8, 11],
      [3, 10, 1, 11, 10, 3],
      [0, 10, 1, 0, 8, 10, 8, 11, 10],
      [3, 9, 0, 3, 11, 9, 11, 10, 9],
      [9, 8, 10, 10, 8, 11],
      [4, 7, 8],
      [4, 3, 0, 7, 3, 4],
      [0, 1, 9, 8, 4, 7],
      [4, 1, 9, 4, 7, 1, 7, 3, 1],
      [1, 2, 10, 8, 4, 7],
      [3, 4, 7, 3, 0, 4, 1, 2, 10],
      [9, 2, 10, 9, 0, 2, 8, 4, 7],
      [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4],
      [8, 4, 7, 3, 11, 2],
      [11, 4, 7, 11, 2, 4, 2, 0, 4],
      [9, 0, 1, 8, 4, 7, 2, 3, 11],
      [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1],
      [3, 10, 1, 3, 11, 10, 7, 8, 4],
      [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4],
      [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3],
      [4, 7, 11, 4, 11, 9, 9, 11, 10],
      [9, 5, 4],
      [9, 5, 4, 0, 8, 3],
      [0, 5, 4, 1, 5, 0],
      [8, 5, 4, 8, 3, 5, 3, 1, 5],
      [1, 2, 10, 9, 5, 4],
      [3, 0, 8, 1, 2, 10, 4, 9, 5],
      [5, 2, 10, 5, 4, 2, 4, 0, 2],
      [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8],
      [9, 5, 4, 2, 3, 11],
      [0, 11, 2, 0, 8, 11, 4, 9, 5],
      [0, 5, 4, 0, 1, 5, 2, 3, 11],
      [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5],
      [10, 3, 11, 10, 1, 3, 9, 5, 4],
      [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10],
      [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3],
      [5, 4, 8, 5, 8, 10, 10, 8, 11],
      [9, 7, 8, 5, 7, 9],
      [9, 3, 0, 9, 5, 3, 5, 7, 3],
      [0, 7, 8, 0, 1, 7, 1, 5, 7],
      [1, 5, 3, 3, 5, 7],
      [9, 7, 8, 9, 5, 7, 10, 1, 2],
      [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3],
      [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2],
      [2, 10, 5, 2, 5, 3, 3, 5, 7],
      [7, 9, 5, 7, 8, 9, 3, 11, 2],
      [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11],
      [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7],
      [11, 2, 1, 11, 1, 7, 7, 1, 5],
      [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11],
      [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0],
      [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0],
      [11, 10, 5, 7, 11, 5],
      [10, 6, 5],
      [0, 8, 3, 5, 10, 6],
      [9, 0, 1, 5, 10, 6],
      [1, 8, 3, 1, 9, 8, 5, 10, 6],
      [1, 6, 5, 2, 6, 1],
      [1, 6, 5, 1, 2, 6, 3, 0, 8],
      [9, 6, 5, 9, 0, 6, 0, 2, 6],
      [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8],
      [2, 3, 11, 10, 6, 5],
      [11, 0, 8, 11, 2, 0, 10, 6, 5],
      [0, 1, 9, 2, 3, 11, 5, 10, 6],
      [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11],
      [6, 3, 11, 6, 5, 3, 5, 1, 3],
      [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6],
      [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9],
      [6, 5, 9, 6, 9, 11, 11, 9, 8],
      [5, 10, 6, 4, 7, 8],
      [4, 3, 0, 4, 7, 3, 6, 5, 10],
      [1, 9, 0, 5, 10, 6, 8, 4, 7],
      [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4],
      [6, 1, 2, 6, 5, 1, 4, 7, 8],
      [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7],
      [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6],
      [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9],
      [3, 11, 2, 7, 8, 4, 10, 6, 5],
      [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11],
      [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6],
      [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6],
      [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6],
      [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11],
      [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7],
      [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9],
      [10, 4, 9, 6, 4, 10],
      [4, 10, 6, 4, 9, 10, 0, 8, 3],
      [10, 0, 1, 10, 6, 0, 6, 4, 0],
      [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10],
      [1, 4, 9, 1, 2, 4, 2, 6, 4],
      [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4],
      [0, 2, 4, 4, 2, 6],
      [8, 3, 2, 8, 2, 4, 4, 2, 6],
      [10, 4, 9, 10, 6, 4, 11, 2, 3],
      [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6],
      [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10],
      [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1],
      [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3],
      [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1],
      [3, 11, 6, 3, 6, 0, 0, 6, 4],
      [6, 4, 8, 11, 6, 8],
      [7, 10, 6, 7, 8, 10, 8, 9, 10],
      [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10],
      [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0],
      [10, 6, 7, 10, 7, 1, 1, 7, 3],
      [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7],
      [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9],
      [7, 8, 0, 7, 0, 6, 6, 0, 2],
      [7, 3, 2, 6, 7, 2],
      [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7],
      [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7],
      [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11],
      [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1],
      [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6],
      [0, 9, 1, 11, 6, 7],
      [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0],
      [7, 11, 6],
      [7, 6, 11],
      [3, 0, 8, 11, 7, 6],
      [0, 1, 9, 11, 7, 6],
      [8, 1, 9, 8, 3, 1, 11, 7, 6],
      [10, 1, 2, 6, 11, 7],
      [1, 2, 10, 3, 0, 8, 6, 11, 7],
      [2, 9, 0, 2, 10, 9, 6, 11, 7],
      [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8],
      [7, 2, 3, 6, 2, 7],
      [7, 0, 8, 7, 6, 0, 6, 2, 0],
      [2, 7, 6, 2, 3, 7, 0, 1, 9],
      [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6],
      [10, 7, 6, 10, 1, 7, 1, 3, 7],
      [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8],
      [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7],
      [7, 6, 10, 7, 10, 8, 8, 10, 9],
      [6, 8, 4, 11, 8, 6],
      [3, 6, 11, 3, 0, 6, 0, 4, 6],
      [8, 6, 11, 8, 4, 6, 9, 0, 1],
      [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6],
      [6, 8, 4, 6, 11, 8, 2, 10, 1],
      [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6],
      [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9],
      [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3],
      [8, 2, 3, 8, 4, 2, 4, 6, 2],
      [0, 4, 2, 4, 6, 2],
      [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8],
      [1, 9, 4, 1, 4, 2, 2, 4, 6],
      [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1],
      [10, 1, 0, 10, 0, 6, 6, 0, 4],
      [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3],
      [10, 9, 4, 6, 10, 4],
      [4, 9, 5, 7, 6, 11],
      [0, 8, 3, 4, 9, 5, 11, 7, 6],
      [5, 0, 1, 5, 4, 0, 7, 6, 11],
      [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5],
      [9, 5, 4, 10, 1, 2, 7, 6, 11],
      [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5],
      [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2],
      [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6],
      [7, 2, 3, 7, 6, 2, 5, 4, 9],
      [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7],
      [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0],
      [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8],
      [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7],
      [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4],
      [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10],
      [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10],
      [6, 9, 5, 6, 11, 9, 11, 8, 9],
      [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5],
      [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11],
      [6, 11, 3, 6, 3, 5, 5, 3, 1],
      [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6],
      [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10],
      [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5],
      [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3],
      [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2],
      [9, 5, 6, 9, 6, 0, 0, 6, 2],
      [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8],
      [1, 5, 6, 2, 1, 6],
      [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6],
      [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0],
      [0, 3, 8, 5, 6, 10],
      [10, 5, 6],
      [11, 5, 10, 7, 5, 11],
      [11, 5, 10, 11, 7, 5, 8, 3, 0],
      [5, 11, 7, 5, 10, 11, 1, 9, 0],
      [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1],
      [11, 1, 2, 11, 7, 1, 7, 5, 1],
      [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11],
      [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7],
      [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2],
      [2, 5, 10, 2, 3, 5, 3, 7, 5],
      [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5],
      [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2],
      [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2],
      [1, 3, 5, 3, 7, 5],
      [0, 8, 7, 0, 7, 1, 1, 7, 5],
      [9, 0, 3, 9, 3, 5, 5, 3, 7],
      [9, 8, 7, 5, 9, 7],
      [5, 8, 4, 5, 10, 8, 10, 11, 8],
      [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0],
      [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5],
      [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4],
      [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8],
      [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11],
      [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5],
      [9, 4, 5, 2, 11, 3],
      [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4],
      [5, 10, 2, 5, 2, 4, 4, 2, 0],
      [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9],
      [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2],
      [8, 4, 5, 8, 5, 3, 3, 5, 1],
      [0, 4, 5, 1, 0, 5],
      [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5],
      [9, 4, 5],
      [4, 11, 7, 4, 9, 11, 9, 10, 11],
      [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11],
      [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11],
      [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4],
      [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2],
      [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3],
      [11, 7, 4, 11, 4, 2, 2, 4, 0],
      [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4],
      [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9],
      [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7],
      [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10],
      [1, 10, 2, 8, 7, 4],
      [4, 9, 1, 4, 1, 7, 7, 1, 3],
      [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1],
      [4, 0, 3, 7, 4, 3],
      [4, 8, 7],
      [9, 10, 8, 10, 11, 8],
      [3, 0, 9, 3, 9, 11, 11, 9, 10],
      [0, 1, 10, 0, 10, 8, 8, 10, 11],
      [3, 1, 10, 11, 3, 10],
      [1, 2, 11, 1, 11, 9, 9, 11, 8],
      [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9],
      [0, 2, 11, 8, 0, 11],
      [3, 2, 11],
      [2, 3, 8, 2, 8, 10, 10, 8, 9],
      [9, 10, 2, 0, 9, 2],
      [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8],
      [1, 10, 2],
      [1, 3, 8, 9, 1, 8],
      [0, 9, 1],
      [0, 3, 8],
      []];

// generated from classical triTable by tools/isolut.py
var segTable = [
	[],
	[],
	[1, 9],
	[1, 8, 1, 9],
	[2, 10, 10, 1],
	[2, 10, 10, 1],
	[9, 2, 2, 10, 10, 9],
	[2, 8, 2, 10, 10, 8, 10, 9],
	[11, 2],
	[0, 11, 11, 2],
	[1, 9, 11, 2],
	[1, 11, 11, 2, 1, 9, 9, 11],
	[3, 10, 10, 1, 11, 10],
	[0, 10, 10, 1, 8, 10, 11, 10],
	[3, 9, 11, 9, 11, 10, 10, 9],
	[8, 10, 10, 9, 11, 10],
	[4, 7],
	[4, 3, 4, 7],
	[1, 9, 4, 7],
	[4, 1, 1, 9, 4, 7, 7, 1],
	[2, 10, 10, 1, 4, 7],
	[3, 4, 4, 7, 2, 10, 10, 1],
	[9, 2, 2, 10, 10, 9, 4, 7],
	[2, 10, 10, 9, 9, 2, 9, 7, 7, 2, 4, 7],
	[4, 7, 11, 2],
	[11, 4, 4, 7, 11, 2, 2, 4],
	[1, 9, 4, 7, 11, 2],
	[4, 7, 11, 4, 11, 9, 11, 2, 2, 9, 1, 9],
	[3, 10, 10, 1, 11, 10, 4, 7],
	[1, 11, 11, 10, 10, 1, 1, 4, 4, 11, 4, 7],
	[4, 7, 0, 11, 11, 9, 11, 10, 10, 9],
	[4, 7, 11, 4, 11, 9, 11, 10, 10, 9],
	[9, 5, 5, 4],
	[9, 5, 5, 4],
	[0, 5, 5, 4, 1, 5],
	[8, 5, 5, 4, 3, 5, 1, 5],
	[2, 10, 10, 1, 9, 5, 5, 4],
	[2, 10, 10, 1, 9, 5, 5, 4],
	[5, 2, 2, 10, 10, 5, 5, 4, 4, 2],
	[2, 10, 10, 5, 5, 2, 5, 3, 5, 4, 4, 3],
	[9, 5, 5, 4, 11, 2],
	[0, 11, 11, 2, 9, 5, 5, 4],
	[0, 5, 5, 4, 1, 5, 11, 2],
	[1, 5, 5, 2, 5, 8, 8, 2, 11, 2, 5, 4],
	[10, 3, 11, 10, 10, 1, 9, 5, 5, 4],
	[9, 5, 5, 4, 8, 1, 8, 10, 10, 1, 11, 10],
	[5, 4, 0, 5, 0, 11, 11, 5, 11, 10, 10, 5],
	[5, 4, 8, 5, 8, 10, 10, 5, 11, 10],
	[9, 7, 5, 7, 9, 5],
	[9, 3, 9, 5, 5, 3, 5, 7],
	[0, 7, 1, 7, 1, 5, 5, 7],
	[1, 5, 5, 3, 5, 7],
	[9, 7, 9, 5, 5, 7, 10, 1, 2, 10],
	[10, 1, 2, 10, 9, 5, 5, 0, 5, 3, 5, 7],
	[2, 8, 2, 5, 5, 8, 5, 7, 10, 5, 2, 10],
	[2, 10, 10, 5, 5, 2, 5, 3, 5, 7],
	[7, 9, 9, 5, 5, 7, 11, 2],
	[9, 5, 5, 7, 7, 9, 7, 2, 2, 9, 11, 2],
	[11, 2, 1, 8, 1, 7, 1, 5, 5, 7],
	[11, 2, 1, 11, 1, 7, 1, 5, 5, 7],
	[9, 5, 5, 8, 5, 7, 10, 1, 3, 10, 11, 10],
	[5, 7, 7, 0, 0, 5, 9, 5, 11, 0, 0, 10, 10, 1, 11, 10],
	[11, 10, 10, 0, 0, 11, 10, 5, 5, 0, 0, 7, 5, 7],
	[11, 10, 10, 5, 5, 11, 5, 7],
	[10, 6, 6, 5, 5, 10],
	[5, 10, 10, 6, 6, 5],
	[1, 9, 5, 10, 10, 6, 6, 5],
	[1, 8, 1, 9, 5, 10, 10, 6, 6, 5],
	[1, 6, 6, 5, 5, 1, 2, 6],
	[1, 6, 6, 5, 5, 1, 2, 6],
	[9, 6, 6, 5, 5, 9, 0, 6, 2, 6],
	[5, 9, 8, 5, 8, 2, 2, 5, 2, 6, 6, 5],
	[11, 2, 10, 6, 6, 5, 5, 10],
	[11, 0, 11, 2, 10, 6, 6, 5, 5, 10],
	[1, 9, 11, 2, 5, 10, 10, 6, 6, 5],
	[5, 10, 10, 6, 6, 5, 1, 9, 9, 2, 9, 11, 11, 2],
	[6, 3, 11, 6, 6, 5, 5, 3, 5, 1],
	[11, 0, 11, 5, 5, 0, 5, 1, 11, 6, 6, 5],
	[11, 6, 6, 3, 6, 0, 6, 5, 5, 0, 5, 9],
	[6, 5, 5, 9, 9, 6, 9, 11, 11, 6],
	[5, 10, 10, 6, 6, 5, 4, 7],
	[4, 3, 4, 7, 6, 5, 5, 10, 10, 6],
	[1, 9, 5, 10, 10, 6, 6, 5, 4, 7],
	[10, 6, 6, 5, 5, 10, 1, 9, 9, 7, 7, 1, 4, 7],
	[6, 1, 2, 6, 6, 5, 5, 1, 4, 7],
	[2, 5, 5, 1, 2, 6, 6, 5, 4, 3, 4, 7],
	[4, 7, 0, 5, 5, 9, 0, 6, 6, 5, 2, 6],
	[3, 9, 9, 7, 4, 7, 2, 9, 5, 9, 9, 6, 6, 5, 2, 6],
	[11, 2, 4, 7, 10, 6, 6, 5, 5, 10],
	[5, 10, 10, 6, 6, 5, 4, 7, 7, 2, 2, 4, 11, 2],
	[1, 9, 4, 7, 11, 2, 5, 10, 10, 6, 6, 5],
	[9, 2, 1, 9, 9, 11, 11, 2, 4, 11, 4, 7, 5, 10, 10, 6, 6, 5],
	[4, 7, 11, 5, 5, 3, 5, 1, 11, 6, 6, 5],
	[5, 1, 1, 11, 11, 5, 11, 6, 6, 5, 0, 11, 11, 4, 4, 7],
	[0, 5, 5, 9, 0, 6, 6, 5, 3, 6, 11, 6, 4, 7],
	[6, 5, 5, 9, 9, 6, 9, 11, 11, 6, 4, 7, 7, 9],
	[10, 4, 9, 10, 6, 4, 10, 6],
	[4, 10, 10, 6, 6, 4, 9, 10],
	[10, 0, 1, 10, 10, 6, 6, 0, 6, 4],
	[1, 8, 1, 6, 6, 8, 6, 4, 1, 10, 10, 6],
	[1, 4, 9, 1, 2, 4, 2, 6, 6, 4],
	[2, 9, 9, 1, 2, 4, 2, 6, 6, 4],
	[2, 4, 2, 6, 6, 4],
	[2, 8, 2, 4, 2, 6, 6, 4],
	[10, 4, 9, 10, 10, 6, 6, 4, 11, 2],
	[8, 2, 11, 2, 9, 10, 10, 4, 10, 6, 6, 4],
	[11, 2, 1, 6, 6, 0, 6, 4, 1, 10, 10, 6],
	[6, 4, 4, 1, 1, 6, 1, 10, 10, 6, 8, 1, 1, 11, 11, 2],
	[9, 6, 6, 4, 9, 3, 3, 6, 9, 1, 11, 6],
	[11, 1, 1, 8, 11, 6, 6, 1, 9, 1, 1, 4, 6, 4],
	[11, 6, 6, 3, 6, 0, 6, 4],
	[6, 4, 8, 6, 11, 6],
	[7, 10, 10, 6, 6, 7, 8, 10, 9, 10],
	[0, 7, 0, 10, 10, 7, 9, 10, 6, 7, 10, 6],
	[10, 6, 6, 7, 7, 10, 1, 10, 7, 1, 8, 1],
	[10, 6, 6, 7, 7, 10, 7, 1, 1, 10],
	[2, 6, 6, 1, 6, 8, 8, 1, 9, 1, 6, 7],
	[2, 6, 6, 9, 9, 2, 9, 1, 6, 7, 7, 9, 9, 3],
	[0, 7, 0, 6, 6, 7, 2, 6],
	[2, 7, 6, 7, 2, 6],
	[11, 2, 10, 6, 6, 8, 8, 10, 9, 10, 6, 7],
	[0, 7, 7, 2, 11, 2, 9, 7, 6, 7, 7, 10, 10, 6, 9, 10],
	[1, 8, 1, 7, 1, 10, 10, 7, 6, 7, 10, 6, 11, 2],
	[11, 2, 1, 11, 1, 7, 10, 6, 6, 1, 1, 10, 6, 7],
	[9, 6, 6, 8, 6, 7, 9, 1, 1, 6, 11, 6, 6, 3],
	[9, 1, 11, 6, 6, 7],
	[0, 7, 0, 6, 6, 7, 11, 0, 11, 6],
	[11, 6, 6, 7],
	[7, 6, 6, 11],
	[7, 6, 6, 11],
	[1, 9, 7, 6, 6, 11],
	[8, 1, 1, 9, 7, 6, 6, 11],
	[10, 1, 2, 10, 6, 11, 7, 6],
	[2, 10, 10, 1, 6, 11, 7, 6],
	[2, 9, 2, 10, 10, 9, 6, 11, 7, 6],
	[6, 11, 7, 6, 2, 10, 10, 3, 10, 8, 10, 9],
	[7, 2, 6, 2, 7, 6],
	[7, 0, 7, 6, 6, 0, 6, 2],
	[2, 7, 7, 6, 6, 2, 1, 9],
	[1, 6, 6, 2, 1, 8, 8, 6, 1, 9, 7, 6],
	[10, 7, 7, 6, 6, 10, 10, 1, 1, 7],
	[10, 7, 7, 6, 6, 10, 1, 7, 10, 1, 1, 8],
	[7, 0, 7, 10, 10, 0, 10, 9, 6, 10, 7, 6],
	[7, 6, 6, 10, 10, 7, 10, 8, 10, 9],
	[6, 8, 4, 6, 6, 11],
	[3, 6, 6, 11, 0, 6, 4, 6],
	[8, 6, 6, 11, 4, 6, 1, 9],
	[4, 6, 6, 9, 6, 3, 3, 9, 1, 9, 6, 11],
	[6, 8, 4, 6, 6, 11, 2, 10, 10, 1],
	[2, 10, 10, 1, 0, 11, 0, 6, 6, 11, 4, 6],
	[4, 11, 4, 6, 6, 11, 2, 9, 2, 10, 10, 9],
	[10, 9, 9, 3, 3, 10, 2, 10, 4, 3, 3, 6, 6, 11, 4, 6],
	[8, 2, 4, 2, 4, 6, 6, 2],
	[4, 2, 4, 6, 6, 2],
	[1, 9, 3, 4, 4, 2, 4, 6, 6, 2],
	[1, 9, 4, 1, 4, 2, 4, 6, 6, 2],
	[8, 1, 8, 6, 6, 1, 4, 6, 6, 10, 10, 1],
	[10, 1, 0, 10, 0, 6, 6, 10, 4, 6],
	[4, 6, 6, 3, 3, 4, 6, 10, 10, 3, 3, 9, 10, 9],
	[10, 9, 4, 10, 6, 10, 4, 6],
	[9, 5, 5, 4, 7, 6, 6, 11],
	[9, 5, 5, 4, 7, 6, 6, 11],
	[5, 0, 1, 5, 5, 4, 7, 6, 6, 11],
	[7, 6, 6, 11, 3, 4, 3, 5, 5, 4, 1, 5],
	[9, 5, 5, 4, 10, 1, 2, 10, 7, 6, 6, 11],
	[6, 11, 7, 6, 2, 10, 10, 1, 9, 5, 5, 4],
	[7, 6, 6, 11, 5, 4, 4, 10, 10, 5, 4, 2, 2, 10],
	[3, 4, 3, 5, 5, 4, 2, 5, 10, 5, 2, 10, 7, 6, 6, 11],
	[7, 2, 7, 6, 6, 2, 5, 4, 9, 5],
	[9, 5, 5, 4, 8, 6, 6, 0, 6, 2, 7, 6],
	[3, 6, 6, 2, 7, 6, 1, 5, 5, 0, 5, 4],
	[6, 2, 2, 8, 8, 6, 7, 6, 1, 8, 8, 5, 5, 4, 1, 5],
	[9, 5, 5, 4, 10, 1, 1, 6, 6, 10, 1, 7, 7, 6],
	[1, 6, 6, 10, 10, 1, 1, 7, 7, 6, 0, 7, 9, 5, 5, 4],
	[0, 10, 10, 4, 10, 5, 5, 4, 3, 10, 6, 10, 10, 7, 7, 6],
	[7, 6, 6, 10, 10, 7, 10, 8, 5, 4, 4, 10, 10, 5],
	[6, 9, 9, 5, 5, 6, 6, 11, 11, 9],
	[3, 6, 6, 11, 0, 6, 0, 5, 5, 6, 9, 5],
	[0, 11, 0, 5, 5, 11, 1, 5, 5, 6, 6, 11],
	[6, 11, 3, 6, 3, 5, 5, 6, 1, 5],
	[2, 10, 10, 1, 9, 5, 5, 11, 11, 9, 5, 6, 6, 11],
	[0, 11, 0, 6, 6, 11, 9, 6, 5, 6, 9, 5, 2, 10, 10, 1],
	[8, 5, 5, 11, 5, 6, 6, 11, 0, 5, 10, 5, 5, 2, 2, 10],
	[6, 11, 3, 6, 3, 5, 5, 6, 2, 10, 10, 3, 10, 5],
	[5, 8, 9, 5, 5, 2, 2, 8, 5, 6, 6, 2],
	[9, 5, 5, 6, 6, 9, 6, 0, 6, 2],
	[1, 5, 5, 8, 8, 1, 5, 6, 6, 8, 8, 2, 6, 2],
	[1, 5, 5, 6, 6, 1, 6, 2],
	[3, 6, 6, 1, 6, 10, 10, 1, 8, 6, 5, 6, 6, 9, 9, 5],
	[10, 1, 0, 10, 0, 6, 6, 10, 9, 5, 5, 0, 5, 6],
	[5, 6, 6, 10, 10, 5],
	[10, 5, 5, 6, 6, 10],
	[11, 5, 5, 10, 10, 11, 7, 5],
	[11, 5, 5, 10, 10, 11, 7, 5],
	[5, 11, 7, 5, 5, 10, 10, 11, 1, 9],
	[10, 7, 7, 5, 5, 10, 10, 11, 8, 1, 1, 9],
	[11, 1, 2, 11, 7, 1, 7, 5, 5, 1],
	[2, 7, 7, 1, 7, 5, 5, 1, 2, 11],
	[9, 7, 7, 5, 5, 9, 9, 2, 2, 7, 2, 11],
	[7, 5, 5, 2, 2, 7, 2, 11, 5, 9, 9, 2, 2, 8],
	[2, 5, 5, 10, 10, 2, 3, 5, 7, 5],
	[8, 2, 8, 5, 5, 2, 7, 5, 10, 2, 5, 10],
	[1, 9, 5, 10, 10, 3, 3, 5, 7, 5, 10, 2],
	[8, 2, 2, 9, 1, 9, 7, 2, 10, 2, 2, 5, 5, 10, 7, 5],
	[3, 5, 5, 1, 7, 5],
	[7, 0, 7, 1, 7, 5, 5, 1],
	[3, 9, 3, 5, 5, 9, 7, 5],
	[7, 9, 5, 9, 7, 5],
	[5, 8, 4, 5, 5, 10, 10, 8, 10, 11],
	[5, 0, 4, 5, 5, 11, 11, 0, 5, 10, 10, 11],
	[1, 9, 4, 10, 10, 8, 10, 11, 4, 5, 5, 10],
	[10, 11, 11, 4, 4, 10, 4, 5, 5, 10, 3, 4, 4, 1, 1, 9],
	[2, 5, 5, 1, 2, 8, 8, 5, 2, 11, 4, 5],
	[4, 11, 11, 0, 4, 5, 5, 11, 2, 11, 11, 1, 5, 1],
	[2, 5, 5, 0, 5, 9, 2, 11, 11, 5, 4, 5, 5, 8],
	[4, 5, 5, 9, 2, 11],
	[2, 5, 5, 10, 10, 2, 3, 5, 3, 4, 4, 5],
	[5, 10, 10, 2, 2, 5, 2, 4, 4, 5],
	[3, 10, 10, 2, 3, 5, 5, 10, 8, 5, 4, 5, 1, 9],
	[5, 10, 10, 2, 2, 5, 2, 4, 4, 5, 1, 9, 9, 2],
	[4, 5, 5, 8, 5, 3, 5, 1],
	[4, 5, 5, 0, 5, 1],
	[4, 5, 5, 8, 5, 3, 0, 5, 5, 9],
	[4, 5, 5, 9],
	[4, 11, 7, 4, 9, 11, 9, 10, 10, 11],
	[9, 7, 7, 4, 9, 11, 9, 10, 10, 11],
	[1, 10, 10, 11, 11, 1, 11, 4, 4, 1, 7, 4],
	[1, 4, 4, 3, 1, 10, 10, 4, 7, 4, 4, 11, 10, 11],
	[4, 11, 7, 4, 9, 11, 9, 2, 2, 11, 9, 1],
	[9, 7, 7, 4, 9, 11, 9, 1, 1, 11, 2, 11],
	[7, 4, 4, 11, 4, 2, 2, 11],
	[7, 4, 4, 11, 4, 2, 2, 11, 3, 4],
	[2, 9, 9, 10, 10, 2, 2, 7, 7, 9, 7, 4],
	[9, 10, 10, 7, 7, 9, 7, 4, 10, 2, 2, 7, 7, 0],
	[7, 10, 10, 3, 10, 2, 7, 4, 4, 10, 1, 10, 10, 0],
	[1, 10, 10, 2, 7, 4],
	[9, 1, 1, 4, 1, 7, 7, 4],
	[9, 1, 1, 4, 1, 7, 7, 4, 8, 1],
	[3, 4, 7, 4],
	[7, 4],
	[9, 10, 10, 8, 10, 11],
	[9, 3, 9, 11, 9, 10, 10, 11],
	[1, 10, 10, 0, 10, 8, 10, 11],
	[1, 10, 10, 3, 10, 11],
	[2, 11, 11, 1, 11, 9, 9, 1],
	[9, 3, 9, 11, 2, 9, 9, 1, 2, 11],
	[2, 11, 11, 0],
	[2, 11],
	[8, 2, 8, 10, 10, 2, 9, 10],
	[9, 10, 10, 2, 2, 9],
	[8, 2, 8, 10, 10, 2, 1, 8, 1, 10],
	[1, 10, 10, 2],
	[8, 1, 9, 1],
	[9, 1],
	[],
	[]];

var segTable2 = [
	[],
	[],
	[1, 9],
	[1, 9],
	[2, 10, 10, 1],
	[2, 10, 10, 1],
	[2, 10, 10, 9],
	[2, 10, 10, 9],
	[11, 2],
	[11, 2],
	[1, 9, 11, 2],
	[11, 2, 1, 9],
	[10, 1, 11, 10],
	[10, 1, 11, 10],
	[11, 10, 10, 9],
	[10, 9, 11, 10],
	[4, 7],
	[4, 7],
	[1, 9, 4, 7],
	[1, 9, 4, 7],
	[2, 10, 10, 1, 4, 7],
	[4, 7, 2, 10, 10, 1],
	[2, 10, 10, 9, 4, 7],
	[2, 10, 10, 9, 4, 7],
	[4, 7, 11, 2],
	[4, 7, 11, 2],
	[1, 9, 4, 7, 11, 2],
	[4, 7, 11, 2, 1, 9],
	[10, 1, 11, 10, 4, 7],
	[11, 10, 10, 1, 4, 7],
	[4, 7, 11, 10, 10, 9],
	[4, 7, 11, 10, 10, 9],
	[9, 5, 5, 4],
	[9, 5, 5, 4],
	[5, 4, 1, 5],
	[5, 4, 1, 5],
	[2, 10, 10, 1, 9, 5, 5, 4],
	[2, 10, 10, 1, 9, 5, 5, 4],
	[2, 10, 10, 5, 5, 4],
	[2, 10, 10, 5, 5, 4],
	[9, 5, 5, 4, 11, 2],
	[11, 2, 9, 5, 5, 4],
	[5, 4, 1, 5, 11, 2],
	[1, 5, 11, 2, 5, 4],
	[11, 10, 10, 1, 9, 5, 5, 4],
	[9, 5, 5, 4, 10, 1, 11, 10],
	[5, 4, 11, 10, 10, 5],
	[5, 4, 10, 5, 11, 10],
	[5, 7, 9, 5],
	[9, 5, 5, 7],
	[1, 5, 5, 7],
	[1, 5, 5, 7],
	[9, 5, 5, 7, 10, 1, 2, 10],
	[10, 1, 2, 10, 9, 5, 5, 7],
	[5, 7, 10, 5, 2, 10],
	[2, 10, 10, 5, 5, 7],
	[9, 5, 5, 7, 11, 2],
	[9, 5, 5, 7, 11, 2],
	[11, 2, 1, 5, 5, 7],
	[11, 2, 1, 5, 5, 7],
	[9, 5, 5, 7, 10, 1, 11, 10],
	[5, 7, 9, 5, 10, 1, 11, 10],
	[11, 10, 10, 5, 5, 7],
	[11, 10, 10, 5, 5, 7],
	[10, 6, 6, 5, 5, 10],
	[5, 10, 10, 6, 6, 5],
	[1, 9, 5, 10, 10, 6, 6, 5],
	[1, 9, 5, 10, 10, 6, 6, 5],
	[6, 5, 5, 1, 2, 6],
	[6, 5, 5, 1, 2, 6],
	[6, 5, 5, 9, 2, 6],
	[5, 9, 2, 6, 6, 5],
	[11, 2, 10, 6, 6, 5, 5, 10],
	[11, 2, 10, 6, 6, 5, 5, 10],
	[1, 9, 11, 2, 5, 10, 10, 6, 6, 5],
	[5, 10, 10, 6, 6, 5, 1, 9, 11, 2],
	[11, 6, 6, 5, 5, 1],
	[5, 1, 11, 6, 6, 5],
	[11, 6, 6, 5, 5, 9],
	[6, 5, 5, 9, 11, 6],
	[5, 10, 10, 6, 6, 5, 4, 7],
	[4, 7, 6, 5, 5, 10, 10, 6],
	[1, 9, 5, 10, 10, 6, 6, 5, 4, 7],
	[10, 6, 6, 5, 5, 10, 1, 9, 4, 7],
	[2, 6, 6, 5, 5, 1, 4, 7],
	[5, 1, 2, 6, 6, 5, 4, 7],
	[4, 7, 5, 9, 6, 5, 2, 6],
	[4, 7, 5, 9, 6, 5, 2, 6],
	[11, 2, 4, 7, 10, 6, 6, 5, 5, 10],
	[5, 10, 10, 6, 6, 5, 4, 7, 11, 2],
	[1, 9, 4, 7, 11, 2, 5, 10, 10, 6, 6, 5],
	[1, 9, 11, 2, 4, 7, 5, 10, 10, 6, 6, 5],
	[4, 7, 5, 1, 11, 6, 6, 5],
	[5, 1, 11, 6, 6, 5, 4, 7],
	[5, 9, 6, 5, 11, 6, 4, 7],
	[6, 5, 5, 9, 11, 6, 4, 7],
	[9, 10, 6, 4, 10, 6],
	[10, 6, 6, 4, 9, 10],
	[1, 10, 10, 6, 6, 4],
	[6, 4, 1, 10, 10, 6],
	[9, 1, 2, 6, 6, 4],
	[9, 1, 2, 6, 6, 4],
	[2, 6, 6, 4],
	[2, 6, 6, 4],
	[9, 10, 10, 6, 6, 4, 11, 2],
	[11, 2, 9, 10, 10, 6, 6, 4],
	[11, 2, 6, 4, 1, 10, 10, 6],
	[6, 4, 1, 10, 10, 6, 11, 2],
	[6, 4, 9, 1, 11, 6],
	[11, 6, 9, 1, 6, 4],
	[11, 6, 6, 4],
	[6, 4, 11, 6],
	[10, 6, 6, 7, 9, 10],
	[9, 10, 6, 7, 10, 6],
	[10, 6, 6, 7, 1, 10],
	[10, 6, 6, 7, 1, 10],
	[2, 6, 9, 1, 6, 7],
	[2, 6, 9, 1, 6, 7],
	[6, 7, 2, 6],
	[6, 7, 2, 6],
	[11, 2, 10, 6, 9, 10, 6, 7],
	[11, 2, 6, 7, 10, 6, 9, 10],
	[1, 10, 6, 7, 10, 6, 11, 2],
	[11, 2, 10, 6, 1, 10, 6, 7],
	[6, 7, 9, 1, 11, 6],
	[9, 1, 11, 6, 6, 7],
	[6, 7, 11, 6],
	[11, 6, 6, 7],
	[7, 6, 6, 11],
	[7, 6, 6, 11],
	[1, 9, 7, 6, 6, 11],
	[1, 9, 7, 6, 6, 11],
	[10, 1, 2, 10, 6, 11, 7, 6],
	[2, 10, 10, 1, 6, 11, 7, 6],
	[2, 10, 10, 9, 6, 11, 7, 6],
	[6, 11, 7, 6, 2, 10, 10, 9],
	[6, 2, 7, 6],
	[7, 6, 6, 2],
	[7, 6, 6, 2, 1, 9],
	[6, 2, 1, 9, 7, 6],
	[7, 6, 6, 10, 10, 1],
	[7, 6, 6, 10, 10, 1],
	[10, 9, 6, 10, 7, 6],
	[7, 6, 6, 10, 10, 9],
	[4, 6, 6, 11],
	[6, 11, 4, 6],
	[6, 11, 4, 6, 1, 9],
	[4, 6, 1, 9, 6, 11],
	[4, 6, 6, 11, 2, 10, 10, 1],
	[2, 10, 10, 1, 6, 11, 4, 6],
	[4, 6, 6, 11, 2, 10, 10, 9],
	[10, 9, 2, 10, 6, 11, 4, 6],
	[4, 6, 6, 2],
	[4, 6, 6, 2],
	[1, 9, 4, 6, 6, 2],
	[1, 9, 4, 6, 6, 2],
	[4, 6, 6, 10, 10, 1],
	[10, 1, 6, 10, 4, 6],
	[4, 6, 6, 10, 10, 9],
	[10, 9, 6, 10, 4, 6],
	[9, 5, 5, 4, 7, 6, 6, 11],
	[9, 5, 5, 4, 7, 6, 6, 11],
	[1, 5, 5, 4, 7, 6, 6, 11],
	[7, 6, 6, 11, 5, 4, 1, 5],
	[9, 5, 5, 4, 10, 1, 2, 10, 7, 6, 6, 11],
	[6, 11, 7, 6, 2, 10, 10, 1, 9, 5, 5, 4],
	[7, 6, 6, 11, 5, 4, 10, 5, 2, 10],
	[5, 4, 10, 5, 2, 10, 7, 6, 6, 11],
	[7, 6, 6, 2, 5, 4, 9, 5],
	[9, 5, 5, 4, 6, 2, 7, 6],
	[6, 2, 7, 6, 1, 5, 5, 4],
	[6, 2, 7, 6, 5, 4, 1, 5],
	[9, 5, 5, 4, 10, 1, 6, 10, 7, 6],
	[6, 10, 10, 1, 7, 6, 9, 5, 5, 4],
	[10, 5, 5, 4, 6, 10, 7, 6],
	[7, 6, 6, 10, 5, 4, 10, 5],
	[9, 5, 5, 6, 6, 11],
	[6, 11, 5, 6, 9, 5],
	[1, 5, 5, 6, 6, 11],
	[6, 11, 5, 6, 1, 5],
	[2, 10, 10, 1, 9, 5, 5, 6, 6, 11],
	[6, 11, 5, 6, 9, 5, 2, 10, 10, 1],
	[5, 6, 6, 11, 10, 5, 2, 10],
	[6, 11, 5, 6, 2, 10, 10, 5],
	[9, 5, 5, 6, 6, 2],
	[9, 5, 5, 6, 6, 2],
	[1, 5, 5, 6, 6, 2],
	[1, 5, 5, 6, 6, 2],
	[6, 10, 10, 1, 5, 6, 9, 5],
	[10, 1, 6, 10, 9, 5, 5, 6],
	[5, 6, 6, 10, 10, 5],
	[10, 5, 5, 6, 6, 10],
	[5, 10, 10, 11, 7, 5],
	[5, 10, 10, 11, 7, 5],
	[7, 5, 5, 10, 10, 11, 1, 9],
	[7, 5, 5, 10, 10, 11, 1, 9],
	[2, 11, 7, 5, 5, 1],
	[7, 5, 5, 1, 2, 11],
	[7, 5, 5, 9, 2, 11],
	[7, 5, 2, 11, 5, 9],
	[5, 10, 10, 2, 7, 5],
	[7, 5, 10, 2, 5, 10],
	[1, 9, 5, 10, 7, 5, 10, 2],
	[1, 9, 10, 2, 5, 10, 7, 5],
	[5, 1, 7, 5],
	[7, 5, 5, 1],
	[5, 9, 7, 5],
	[5, 9, 7, 5],
	[4, 5, 5, 10, 10, 11],
	[4, 5, 5, 10, 10, 11],
	[1, 9, 10, 11, 4, 5, 5, 10],
	[10, 11, 4, 5, 5, 10, 1, 9],
	[5, 1, 2, 11, 4, 5],
	[4, 5, 2, 11, 5, 1],
	[5, 9, 2, 11, 4, 5],
	[4, 5, 5, 9, 2, 11],
	[5, 10, 10, 2, 4, 5],
	[5, 10, 10, 2, 4, 5],
	[10, 2, 5, 10, 4, 5, 1, 9],
	[5, 10, 10, 2, 4, 5, 1, 9],
	[4, 5, 5, 1],
	[4, 5, 5, 1],
	[4, 5, 5, 9],
	[4, 5, 5, 9],
	[7, 4, 9, 10, 10, 11],
	[7, 4, 9, 10, 10, 11],
	[1, 10, 10, 11, 7, 4],
	[1, 10, 7, 4, 10, 11],
	[7, 4, 2, 11, 9, 1],
	[7, 4, 9, 1, 2, 11],
	[7, 4, 2, 11],
	[7, 4, 2, 11],
	[9, 10, 10, 2, 7, 4],
	[9, 10, 7, 4, 10, 2],
	[10, 2, 7, 4, 1, 10],
	[1, 10, 10, 2, 7, 4],
	[9, 1, 7, 4],
	[9, 1, 7, 4],
	[7, 4],
	[7, 4],
	[9, 10, 10, 11],
	[9, 10, 10, 11],
	[1, 10, 10, 11],
	[1, 10, 10, 11],
	[2, 11, 9, 1],
	[9, 1, 2, 11],
	[2, 11],
	[2, 11],
	[10, 2, 9, 10],
	[9, 10, 10, 2],
	[10, 2, 1, 10],
	[1, 10, 10, 2],
	[9, 1],
	[9, 1],
	[],
	[]];

var edgeIndex = [[0,1], [1,2], [2,3], [3,0], [4,5], [5,6],
				[6,7], [7,4], [0,4], [1,5], [2,6], [3,7]];